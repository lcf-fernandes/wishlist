{"1750426573389":{"actionType":"saveAll","createdAt":"1750426573389","actionID":"1750426573389","userID":"#TEMP","path":"system.capsules.baada40b-9ec2-4c53-8589-f66f0a8e5358.capsUseCodeInfo.capsUseInputs.sss_custom_caps_el-0.capsIptTxtValue","oldValue":"const [games, setGames] = useState([]);\nconst [loading, setLoading] = useState(false);\n\nconst fetchDeals = async (filterType) => {\n  setLoading(true);\n  let url = \"https://www.cheapshark.com/api/1.0/deals?\";\n\n  switch (filterType) {\n    case \"store\":\n      url += \"storeID=1\";\n      break;\n    case \"lowest\":\n      url += \"sortBy=Price\";\n      break;\n    case \"discount\":\n      url += \"sortBy=Deal%20Rating\";\n      break;\n    default:\n      break;\n  }\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    setGames(data);\n\n    // Salva a lista no contexto do Flaxboll em sc.A1.filteredGames\n    const path = \"sc.A1.filteredGames\";\n    const pass = { keyPath: [path], value: data };\n    tools.functions.setVar({ args: '', pass });\n\n  } catch (error) {\n    console.error(\"Erro ao buscar dados:\", error);\n  } finally {\n    setLoading(false);\n  }\n};\n\nreturn (\n  <RN.View style={{ padding: 16 }}>\n    <RN.Text style={{ fontSize: 20, fontWeight: \"bold\", marginBottom: 12 }}>\n      Filtros:\n    </RN.Text>\n\n    <RN.View style={{ marginBottom: 12 }}>\n      <RN.Button\n        title=\"Filtrar por Loja (Steam)\"\n        onPress={() => fetchDeals(\"store\")}\n      />\n    </RN.View>\n\n    <RN.View style={{ marginBottom: 12 }}>\n      <RN.Button title=\"Menor Preço\" onPress={() => fetchDeals(\"lowest\")} />\n    </RN.View>\n\n    <RN.View style={{ marginBottom: 12 }}>\n      <RN.Button\n        title=\"Maior Desconto\"\n        onPress={() => fetchDeals(\"discount\")}\n      />\n    </RN.View>\n\n    {loading ? (\n      <RN.ActivityIndicator size=\"large\" />\n    ) : (\n      <RN.FlatList\n        data={games}\n        keyExtractor={(item) => item.dealID}\n        renderItem={({ item }) => (\n          <RN.View\n            style={{\n              marginBottom: 10,\n              padding: 10,\n              borderWidth: 1,\n              borderColor: \"#ccc\",\n              borderRadius: 6,\n            }}\n          >\n            <RN.Text style={{ fontWeight: \"bold\", fontSize: 16 }}>\n              {item.title}\n            </RN.Text>\n            <RN.Text>\n              Preço: ${item.salePrice} (Normal: ${item.normalPrice})\n            </RN.Text>\n            <RN.Text>\n              Desconto:{\" \"}\n              {Math.round(\n                ((item.normalPrice - item.salePrice) / item.normalPrice) * 100\n              )}\n              %\n            </RN.Text>\n          </RN.View>\n        )}\n      />\n    )}\n  </RN.View>\n);\n","newValue":"const [games, setGames] = useState([]);\nconst [loading, setLoading] = useState(false);\n\nconst fetchDeals = async (filterType) => {\n  setLoading(true);\n  let url = \"https://www.cheapshark.com/api/1.0/deals?\";\n\n  switch (filterType) {\n    case \"store\":\n      url += \"storeID=1\";\n      break;\n    case \"lowest\":\n      url += \"sortBy=Price\";\n      break;\n    case \"discount\":\n      url += \"sortBy=Deal%20Rating\";\n      break;\n    default:\n      break;\n  }\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    setGames(data);\n\n    // Salva a lista no contexto do Flaxboll em sc.A1.filteredGames\n    const path = \"sc.A1.filteredGames\";\n    const pass = { keyPath: [path], value: data };\n    tools.functions.setVar({ args: '', pass });\n\n  } catch (error) {\n    console.error(\"Erro ao buscar dados:\", error);\n  } finally {\n    setLoading(false);\n  }\n};\n\nreturn ();\n"}}